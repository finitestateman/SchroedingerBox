type Alive<T> = (value: T) => void;
type Dead = (reason: any) => void;

class SchroedingersBox<T> extends Promise<T> {
  constructor(createBox: (alive: Alive<T>, dead: Dead) => void) {
    console.log('동물들을 상자에 넣었습니다.');

    // Promise의 executor 호출
    super((resolve, reject) => {
      createBox(resolve, reject);
    });
  }

  // resolve를 동물이 살아있음으로 치환
  static alive<T>(value: T): SchroedingersBox<T> {
    return new SchroedingersBox<T>((resolve) => resolve(value));
  }

  // reject를 동물이 죽었음으로 치환
  static dead(reason: any): SchroedingersBox<never> {
    return new SchroedingersBox<never>((_, reject) => reject(reason));
  }
}

// 동물 상태 실험
const animalExperiment = (animalName: string, result: string): SchroedingersBox<string> => {
  return new SchroedingersBox<string>((alive, dead) => {
    const isAnimalAlive = Math.random() > 0.5; // 50% 확률로 동물 상태 결정

    setTimeout(() => {
      if (isAnimalAlive) {
        alive(result); // alive 호출
      } else {
        dead(`${animalName}가 죽었습니다...`); // dead 호출
      }
    }, 1000); // 1초 후에 상태 결정
  });
};

// 사자, 호랑이, 표범 상태 확인
const lionPromise = animalExperiment('사자', '사자가 살아있습니다!');
const tigerPromise = animalExperiment('호랑이', '호랑이가 살아있습니다!');
const leopardPromise = animalExperiment('표범', '표범이 살아있습니다!');

// 각 Promise 결과 처리
lionPromise
  .then(result => console.log(result))
  .catch(error => console.error(error));

tigerPromise
  .then(result => console.log(result))
  .catch(error => console.error(error));

leopardPromise
  .then(result => console.log(result))
  .catch(error => console.error(error));

